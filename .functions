# This line imports an OS specific functions file if one exists
# Not been tested on any OS other than Mac OSX
# TODO: find a better way than uname to distinguish between linux distros
[ -f ".functions.$( uname )" ] && source ".functions.$( uname )"

# Utility function to generate completions for files in a directory
_dir_completions() {
  # 1st argument $1 is the directory name
  if [ -z "$1" ]; then
    return
  fi

  # Only attempt completions if either only the command has been entered (i.e. 'play<tab>')
  # or the command is followed by a single word (i.e. 'play grou<tab>')
  if [ "${#COMP_WORDS[@]}" != "2" -a "${#COMP_WORDS[@]}" != "1" ]; then
    return
  fi

  # The command in the substitution is a little convoluted; we're doing things
  # like this to allow the function to return completions from multiple
  # directories. Using the -l option to ls lists everything line by line along
  # with a couple of lines of metadata (i.e. dir name, count). The NF > 8 in
  # the awk invocation filters for those lines which contain more than 8
  # fields, which filters out the metadata lines and leaves the long directory
  # listing intact. From this, we print the 9th field, which contains the
  # file/directory name. The xargs echo in the end converts from one file per
  # line to a list of space separated files.
  COMPREPLY=($(compgen -W "$(ls -l $@ | awk 'NF > 8 {print $9}' | xargs echo)" "${COMP_WORDS[1]}"))
}

# I use playgrounds to experiment with new languages and features
# without making a full fledged project
# This creates a new playground with the name given as a command line arg
play () {
        # TODO : redirect io to /dev/null and write custom messages
        if [ "$#" -lt 1 ] ; then
                cd "$PATH_TO_PLAYGROUND" && echo 'In playground'
        fi

        mkdir -p "$PATH_TO_PLAYGROUND/$1" && cd "$PATH_TO_PLAYGROUND/$1"

        if [ "$2" = "--autoremove" ] ; then
          touch "$PATH_TO_PLAYGROUND/$1/.autoremove"
        fi

        if [ -e "$PATH_TO_PLAYGROUND/$1/.autoremove" ] ; then
          echo "WARN: This playground will be deleted on the 1st of the coming month"
        fi

        echo "In playground $1" 
}

# compspec for play
_play_completions() {
  _dir_completions "$PATH_TO_PLAYGROUND"
}

complete -F _play_completions play

# Create a new project and cd into it, does NOT check if project already exists
project () {
        # TODO : redirect io to /dev/null and write custom messages
        if [ $# -lt 1 ] ; then
                cd "$PATH_TO_PROJECTS" && echo 'In Projects'
        fi

        mkdir -p "$PATH_TO_PROJECTS/$1" && cd "$PATH_TO_PROJECTS/$1"
        echo "In project $1"
}


# Create a useful tmux split which has 3 panes
# One of which is the main pane and the other two are smaller
ide () {
  # Get the width of the screen
  screen_width=$( tmux display -p '#{window_width}')
  # The small panes will be a third the width of the window
  small_pane_width=$( expr "$screen_width" / 3 )

  # Split into two halves horizontally
  tmux split-window -h
  # Split the second half into two halves. These are the small panes
  tmux split-window
  # Resize the small panes
  tmux resize-pane -x $small_pane_width
}

# compspec for project
_project_completions() {
  _dir_completions "$PATH_TO_PROJECTS"
}

complete -F _project_completions project

journal() {
  curdir=$( pwd )
  cd "$PATH_TO_JOURNAL"
  vim "$1"
  cd "$curdir"
}

_journal_completions() {
  _dir_completions "$PATH_TO_JOURNAL"
}

complete -F _journal_completions journal

YELLOW_BOLD='\033[33;1m'
GREEN_BOLD='\033[32;1m'
RED_BOLD='\033[31;1m'
BLUE_BOLD='\033[36;1m'
CLEAR='\033[0m'

# This is quite sinful but is basically a grep with a sed that
# Processes something like [TAG] Title Is Here
# 1. Removes the ']' character from the TAG since the grep doesn't do so
# 2. Replaces the TAG with a coloured version of the same thing based on
#    status. The ugly printf stuff is to display the colors. The messy quoting
#    should be discernable if you squint at it long enough
# 3. Replaces the first space with a tag (notice the lack of the
#    g option to the last sed command) to neatly align the tags and the titles
#    in columns
# This could've been an alias but honestly getting the quoting/escaping right was a real pain
ls-project-ideas() {
    grep -Po '^### \[\K([A-Z]*)].*$' "${PATH_TO_JOURNAL}/project-ideas.md" | sed 's/]//;s/TODO/'$(printf "${BLUE_BOLD}TODO${CLEAR}")'/;s/DOING/'$(printf "${YELLOW_BOLD}DOING${CLEAR}")'/;s/WONTDO/'$(printf "${RED_BOLD}WONTDO${CLEAR}")'/;s/DONE/'$(printf "${GREEN_BOLD}DONE${CLEAR}")'/;s/ /\t/'
}

# This should be the last line of the file
# For local changes
# Don't make edits below this
[ -f "$HOME/.functions.local" ] && source "$HOME/.functions.local"
